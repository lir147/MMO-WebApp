document.addEventListener('DOMContentLoaded', function() {
    // Game Data
    const classData = {
        warrior: {
            name: "–í–æ–∏–Ω",
            icon: "‚öîÔ∏è",
            stats: { health: 120, mana: 50, strength: 15, agility: 8, vitality: 12, intellect: 5 },
            skills: [
                { name: "–ú–æ—â–Ω—ã–π —É–¥–∞—Ä", icon: "üí•", desc: "–ù–∞–Ω–æ—Å–∏—Ç 150% —É—Ä–æ–Ω–∞", cost: "10 –º–∞–Ω—ã" },
                { name: "–ë–µ—Ä—Å–µ—Ä–∫", icon: "‚ö°", desc: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∏–ª—É –Ω–∞ 20%", cost: "15 –º–∞–Ω—ã" },
                { name: "–©–∏—Ç–æ–≤–∞—è —Å—Ç–µ–Ω–∞", icon: "üõ°Ô∏è", desc: "–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞—Ç–∞–∫—É", cost: "20 –º–∞–Ω—ã" },
                { name: "–†—ã–≤–æ–∫", icon: "üèÉ", desc: "–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏", cost: "8 –º–∞–Ω—ã" }
            ]
        },
        mage: {
            name: "–ú–∞–≥",
            icon: "üßô",
            stats: { health: 80, mana: 150, strength: 5, agility: 7, vitality: 6, intellect: 20 },
            skills: [
                { name: "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä", icon: "üî•", desc: "–ù–∞–Ω–æ—Å–∏—Ç 12-14 —É—Ä–æ–Ω–∞", cost: "15 –º–∞–Ω—ã" },
                { name: "–õ–µ–¥—è–Ω–∞—è —Å—Ç—Ä–µ–ª–∞", icon: "‚ùÑÔ∏è", desc: "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Ü–µ–ª–∏", cost: "12 –º–∞–Ω—ã" },
                { name: "–ú–æ–ª–Ω–∏—è", icon: "‚ö°", desc: "16-18 —É—Ä–æ–Ω–∞", cost: "18 –º–∞–Ω—ã" },
                { name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç", icon: "üõ°Ô∏è", desc: "–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ —É—Ä–æ–Ω–∞", cost: "25 –º–∞–Ω—ã" },
                { name: "–¢–µ–ª–µ–ø–æ—Ä—Ç", icon: "‚ú®", desc: "–ö–æ—Ä–æ—Ç–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ", cost: "20 –º–∞–Ω—ã" }
            ]
        },
        archer: {
            name: "–õ—É—á–Ω–∏–∫",
            icon: "üèπ",
            stats: { health: 100, mana: 80, strength: 8, agility: 18, vitality: 9, intellect: 7 },
            skills: [
                { name: "–¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª", icon: "üéØ", desc: "100% —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è", cost: "12 –º–∞–Ω—ã" },
                { name: "–î–æ–∂–¥—å —Å—Ç—Ä–µ–ª", icon: "üåßÔ∏è", desc: "–ê—Ç–∞–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏", cost: "20 –º–∞–Ω—ã" },
                { name: "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å", icon: "üëÅÔ∏è", desc: "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ 10 —Å–µ–∫", cost: "15 –º–∞–Ω—ã" },
                { name: "–Ø–¥–æ–≤–∏—Ç–∞—è —Å—Ç—Ä–µ–ª–∞", icon: "‚ò†Ô∏è", desc: "–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º", cost: "10 –º–∞–Ω—ã" }
            ]
        },
        rogue: {
            name: "–†–∞–∑–±–æ–π–Ω–∏–∫",
            icon: "üó°Ô∏è",
            stats: { health: 90, mana: 70, strength: 10, agility: 16, vitality: 8, intellect: 6 },
            skills: [
                { name: "–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä", icon: "üíÄ", desc: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä –≤ —Å–ø–∏–Ω—É", cost: "15 –º–∞–Ω—ã" },
                { name: "–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ", icon: "üß™", desc: "–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º", cost: "8 –º–∞–Ω—ã" },
                { name: "–£–∫–ª–æ–Ω–µ–Ω–∏–µ", icon: "üåÄ", desc: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è", cost: "12 –º–∞–Ω—ã" },
                { name: "–ë—Ä–æ—Å–æ–∫ –Ω–æ–∂–µ–π", icon: "üî™", desc: "–ê—Ç–∞–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–µ–ª—è–º–∏", cost: "10 –º–∞–Ω—ã" }
            ]
        }
    };

    const questsData = [
        {
            title: "–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –∫—Ä—ã—Å",
            desc: "–£–±–∏—Ç—å 10 –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –∫—Ä—ã—Å –≤ –ø–æ–¥–≤–∞–ª–∞—Ö —Ç–∞–≤–µ—Ä–Ω—ã",
            reward: { xp: 50, gold: 10 },
            level: 1
        },
        {
            title: "–í–æ–ª–∫–∏ —É –≥—Ä–∞–Ω–∏—Ü—ã",
            desc: "–ò—Å—Ç—Ä–µ–±–∏—Ç—å —Å—Ç–∞—é –≤–æ–ª–∫–æ–≤, –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö –Ω–∞ –ø—É—Ç–Ω–∏–∫–æ–≤",
            reward: { xp: 100, gold: 25 },
            level: 2
        },
        {
            title: "–ü—Ä–æ–∫–ª—è—Ç—ã–π —Å–∞–¥",
            desc: "–û—á–∏—Å—Ç–∏—Ç—å —Å–∞–¥ –æ—Ç –Ω–µ–∂–∏—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏–ª–∞—Å—å —Ç–∞–º –Ω–µ–¥–∞–≤–Ω–æ",
            reward: { xp: 200, gold: 50 },
            level: 3
        },
        {
            title: "–ë–∞–Ω–¥–∏—Ç—ã –Ω–∞ –¥–æ—Ä–æ–≥–µ",
            desc: "–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –±–∞–Ω–¥–æ–π, –≥—Ä–∞–±—è—â–µ–π —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã",
            reward: { xp: 150, gold: 40 },
            level: 2
        }
    ];

    // Game State
    let currentClass = 'warrior';
    let currentGender = 'male';
    let characterName = '';

    // DOM Elements
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    const classOptions = document.querySelectorAll('.class-option');
    const genderOptions = document.querySelectorAll('.gender-option');
    const nicknameInput = document.getElementById('nickname');
    const startButton = document.getElementById('start-button');

    // Initialize
    initTabs();
    initCharacterCreation();
    updateStats(currentClass);
    renderSkills(currentClass);
    renderQuests();

    // Tab System
    function initTabs() {
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                const tabId = this.dataset.tab;
                
                // Update active tab
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                this.classList.add('active');
                document.getElementById(tabId).classList.add('active');
            });
        });
    }

    // Character Creation
    function initCharacterCreation() {
        // Class selection
        classOptions.forEach(option => {
            option.addEventListener('click', function() {
                classOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                
                currentClass = this.dataset.class;
                updateStats(currentClass);
                updateCharacterPreview();
                renderSkills(currentClass);
            });
        });

        // Gender selection
        genderOptions.forEach(option => {
            option.addEventListener('click', function() {
                genderOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                currentGender = this.dataset.gender;
                updateCharacterPreview();
            });
        });

        // Nickname input
        nicknameInput.addEventListener('input', function() {
            characterName = this.value.trim();
            updateCharacterPreview();
        });

        // Start game button
        startButton.addEventListener('click', function() {
            if (!characterName) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!');
                nicknameInput.focus();
                return;
            }
            
            // Switch to stats tab
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            document.querySelector('[data-tab="stats"]').classList.add('active');
            document.getElementById('stats').classList.add('active');

            // Initialize game with created character
            initializeGame();
        });
    }

    function updateStats(className) {
        const stats = classData[className].stats;
        const statsContainer = document.getElementById('stats-display');

        statsContainer.innerHTML = `
            <div class="stat-row">
                <span class="stat-icon">‚ù§Ô∏è</span>
                <span class="stat-name">–ó–¥–æ—Ä–æ–≤—å–µ:</span>
                <span class="stat-value">${stats.health}</span>
            </div>
            <div class="stat-row">
                <span class="stat-icon">üîÆ</span>
                <span class="stat-name">–ú–∞–Ω–∞:</span>
                <span class="stat-value">${stats.mana}</span>
            </div>
            <div class="stat-row">
                <span class="stat-icon">üí™</span>
                <span class="stat-name">–°–∏–ª–∞:</span>
                <span class="stat-value">${stats.strength}</span>
            </div>
            <div class="stat-row">
                <span class="stat-icon">üèÉ</span>
                <span class="stat-name">–õ–æ–≤–∫–æ—Å—Ç—å:</span>
                <span class="stat-value">${stats.agility}</span>
            </div>
            <div class="stat-row">
                <span class="stat-icon">üõ°Ô∏è</span>
                <span class="stat-name">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å:</span>
                <span class="stat-value">${stats.vitality}</span>
            </div>
            <div class="stat-row">
                <span class="stat-icon">üß†</span>
                <span class="stat-name">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:</span>
                <span class="stat-value">${stats.intellect}</span>
            </div>
        `;
    }

    function renderSkills(className) {
        const skills = classData[className].skills;
        const skillsContainer = document.getElementById('skills-display');

        skillsContainer.innerHTML = skills.map(skill => `
            <div class="skill-card">
                <div class="skill-header">
                    <span class="skill-icon">${skill.icon}</span>
                    <h4 class="skill-name">${skill.name}</h4>
                </div>
                <p class="skill-desc">${skill.desc}</p>
                <div class="skill-cost">${skill.cost}</div>
            </div>
        `).join('');
    }

    function renderQuests() {
        const questsContainer = document.getElementById('quests-display');

        questsContainer.innerHTML = questsData.map(quest => `
            <div class="quest-card">
                <h4 class="quest-title">${quest.title}</h4>
                <p class="quest-desc">${quest.desc}</p>
                <div class="quest-level">–£—Ä–æ–≤–µ–Ω—å: ${quest.level}</div>
                <div class="quest-reward">
                    <span>–ù–∞–≥—Ä–∞–¥–∞: ${quest.reward.xp} –æ–ø—ã—Ç–∞, ${quest.reward.gold} –∑–æ–ª–æ—Ç–∞</span>
                </div>
            </div>
        `).join('');
    }

    function updateCharacterPreview() {
        const preview = document.getElementById('character-preview');
        const classInfo = classData[currentClass];

        preview.innerHTML = `
            <div class="character-image">
                ${classInfo.icon}
            </div>
            <h3>${characterName || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}</h3>
            <p>${classInfo.name}</p>
            <p>${currentGender === 'male' ? '‚ôÇ –ú—É–∂—Å–∫–æ–π' : '‚ôÄ –ñ–µ–Ω—Å–∫–∏–π'}</p>
        `;
    }

    function initializeGame() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
        console.log('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
        console.log('–ü–µ—Ä—Å–æ–Ω–∞–∂:', {
            name: characterName,
            class: currentClass,
            gender: currentGender,
            stats: classData[currentClass].stats
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        document.getElementById('character-info').innerHTML = `
            <h2>${characterName}</h2>
            <p>${classData[currentClass].icon} ${classData[currentClass].name}</p>
            <p>${currentGender === 'male' ? '‚ôÇ –ú—É–∂—Å–∫–æ–π' : '‚ôÄ –ñ–µ–Ω—Å–∫–∏–π'}</p>
        `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const targetTab = this.dataset.tab;
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));

            document.querySelector(`[data-tab="${targetTab}"]`).classList.add('active');
            document.getElementById(targetTab).classList.add('active');
        });
    });

});